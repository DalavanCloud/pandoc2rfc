# Pandoc to RFC

When writing [](#RFC4641) we directly wrote the
XML. Needless to say is was kinda tedious even thought the XML of [xml2rfc](http://xml.resource.org/)
is very "light".

[Readers on Github: the rendering you are now viewing looks different than intended. This is because
 this file is formatted in Pandoc, not the Markdown+Ruby dialect Github uses.]

Nowadays I'm a fan of the markdown syntax and especially the syntax as supported (created?)
by [Pandoc](http://johnmacfarlane.net/pandoc/).

So for my next RFC (if ever!) I decided I wanted to use Pandoc. As `xml2rfc` uses XML
I thought the easiest way would be to create `docbook` XML and transform that using
XSLT. Pandoc2rfc does just that. The conversions are, in some way amusing, as we start
off with (almost) plain text, use elaborate XML and end up with plain text again.

    +--------+      +---------+  
    | PANDOC | ->   | DOCBOOK |  
    +--------+      +---------+  
                           |
                           v
    +------------+      +---------+ 
    | PLAIN TEXT |  <-  | XML2RFC | 
    +------------+      +---------+ 

The XML generated is suitable for inclusion in either the `middle` or `back` section
of an RFC. The easiest way is to create a template XML file and include the appropriate
XML:

    <?xml version='1.0' ?>
    <!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>

    <rfc ipr='trust200902' docName='draft-gieben-pandoc-rfcs-01'>
     <front>
        <title>Writing I-Ds and RFCs using Pandoc</title>
    </front>

    <middle>
        <?rfc include="middle.xml"?>
    </middle>

    <back>
        <?rfc include="back.xml"?>
    </back>

    </rfc>
    Figure: A minimal template.xml.

See the Makefile for an example of this. In this case you need to edit
3 documents:

1. middle.mdk;
1. back.mkd;
1. template.xml (probably a fairly static file).

The draft (`draft.txt`) is automatically created when you call `make`. 
Note that this `README.mkd` is converted to an RFC-like document when you call `make`.

It needs `xsltproc` and `pandoc` to be installed. See the [Pandoc user manual for
the details](http://johnmacfarlane.net/pandoc/README.html) on how to type in Pandoc
style.

What is supported?

* Sections with anchor and title attributes;
* Tables;
* Lists
    * style=symbols;
    * style=numbers;
    * style=letters;
    * style=format %i, roman lowercase numerals;
    * style=format %I, roman uppercase numerals;
    * style=hanging;
    * style=empty;
* Figure/artwork;
* Block quote - this isn't supported by `xml2rfc`, so this is converted to
    figure/artwork paragraph;
* References 
    * external (eref); 
    * internal (xref);
* Spanx style=verb, style=emph, style=strong.

What's not?

* lists inside a table (`xml2rfc` doesn't handle this);
* crefs: for comments (no input syntax available);
* irefs: index (no input syntax available);
* footnotes, this isn't supported in `xml2rfc`, you will get a warning
    when these are encountered.

The heavy lifting is done by `transform.xsl` that transforms the XML.

The homepage of Pandoc2rfc is [this github repository](https://github.com/miekg/pandoc2rfc).

# Acknowledgements

The following people have helped to make Pandoc2rfc what it is today:

* Benno Overeinder
* Erlend Hamnaberg
* Matthijs Mekking
* Trygve Laugst√∏l 

# Pandoc Constructs

So, what syntax do you need to use to get the correct output? Well, it
is *just* Pandoc. The best introduction to the Pandoc style is given
in this [README from Pandoc itself](http://johnmacfarlane.net/pandoc/README.html).

For convenience we list the most important ones in the following sections.

## Paragraphs

Paragraphs are separated with an empty line.

## Section
Just use the normal sectioning commands available in Pandoc, I tend to use

    # Section1 One
    Bla

Converts to `xml2rfc`: `<section title="Section1 One" anchor="section1-one">`
If you have another section that is also named "Section1 One", that
anchor will be called "section1-one-1", but *only* when the sections are in
*the* *same* file!

Referencing the section
is done with `see [](#section1-one)`, as in see [](#section).

## List Styles

A good number of styles are supported.

### Symbols

    A symbol list.

    * Item one;
    * Item two.

Converts to: `<list style="symbol">`

### Numbers

    A numbered list.

    1. Item one;
    2. Item two.

Converts to: `<list style="numbers">`

### Empty
Using the default list markers from Pandoc:

    A list using the default list markers.

    #. First item;
    #. Second item.

Converts to: `<list style="empty">`

### Roman
Use the supported Pandoc syntax:

    ii. First item;
    ii. Second item.

Or:

    II. First item;
    II. Second item.

Converts to: `<list style="format %i.">`. Or in the case of uppercase, this
yields: `<list style="format %I.">`

### Letters

    A numbered list.

    a. Item one;
    b. Item two.

Converts to: `<list style="letters">`, uppercasing the letters works too.

### Hanging
This is more like a description list, so we need to use:

    First item that needs clarification:

    :   Explanation one
    More stuff, because item is difficult to explain.
    * item1
    * item2

    Second item that needs clarification:

    :   Explanation two

Converts to: `<list style="hanging">` and `<t hangText="First item that...">`

## Figure/Artwork

Indent the paragraph with 4 spaces.

    Like this

Converts to: `<figure><artwork> ...`
Note that `xml2rfc` supports a caption with `<artwork>`. Pandoc does not support this, but pandoc2rfc
does. If you add a `Figure: some text` as the last line, the artwork gets a `<preamble>` with the text
after `Figure: `. It will also be possible to reference the artwork. 
The reference anchor
attribute will be: `filename without the extension` + `:fig:` + `sequence number`.
So the second artwork with a caption in the file `middle.mkd` will get `middle:fig:2`
as a reference. See for instance [](#middle:fig:2).

## Block quote
This is not supported by `xml2rfc`, but any paragraph like:

    > quoted text

Converts to: `<figure><artwork> ...`

## Refs External
Any reference like:

    [Click here](URI)

Converts to: `<ulink target="URI">Click here ...`

## Refs Internal
Any reference like:

    [Click here](#localid)

Converts to: `<link target="localid">Click here ...`

For referring to RFCs (for which you manually need add the reference source in the template,
use a `include refs.xml` or something), you can just use:

    [](#RFC2119)

And it does the right thing. Referencing sections is done with:

    See [](#pandoc-constructs)

The word 'Section' is inserted automatically: ... see [](#pandoc-constructs) ...

## Spanx Style
The verb style can be selected with back-tics:

    `text`

Converts to: `<spanx style="verb"> ...`

And the emphasis style with asterisks:

    *text*

Converts to: `<spanx style="emph"> ...`

And the emphasis style with double asterisks:

    **text**

Converts to: `<spanx style="strong"> ...`

## Tables
A table can be entered as:

      Right     Left     Center     Default                                                                  
      -------   ------ ----------   -------                                                                  
           12     12        12        12                                                                   
          123     123       123       123                                                                   
            1     1         1         1       

      Table: A caption describing the table.

Is translated to `<texttable`> element in `xml2rfc`. You can choose multiple styles
as input, but they all are converted to the same style (plain `<texttable>`) table in `xml2rfc`.
The caption is *always* translated to a `<preamble`>. The `<postamble>` tag isn't supported.

If a table has a caption, it will *also* get a reference. The reference anchor
attribute will be: `filename without the extension` + `:tab:` + `sequence number`.
So the first table with a caption in the file `back.mkd` will get `back:tab:1`
for reference use. See for instance [](#back:tab:1).
