== AsciiDoc to RFC ==

When writing [RFC 4641](RFC4641) we directly wrote the
XML. Needless to say is was kinda tedious even thought the XML of http://xml.resource.org/[xml2rfc]
is very "light".

Nowadays I'm a fan of the markdown syntax and especially the syntax as supported (created?)
by http://johnmacfarlane.net/pandoc/[Pandoc]. But there are more plain text markup languages
out there. One of those is AsciiDoc.

One of the ways to write an RFC is to write in AsciiDoc and output `docbook` XML 
and transform that using XSLT.

The XML generated is suitable for inclusion in either the `middle` or `back` section
of an RFC. The easiest way is to create a template xml file and include the appropriate
XML:


---------------------------
    <?xml version='1.0' ?>
    <!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>

    <rfc ipr='trust200902' docName='draft-gieben-pandoc-writing-rfcs-01'>
     <front>
        <title>Writing I-Ds and RFCs using Pandoc</title>
    </front>

    <middle>
        <?rfc include="middle.xml"?>
    </middle>

    <back>
        <?rfc include="back.xml"?>
    </back>

    </rfc>
---------------------------


See the Makefile for an example of this. In this case you need to edit
3 documents:

1. middle.asciidoc;
2. back.asciidoc;
3. template.xml (probably a fairly static file).

The draft (`draft.txt`) is automatically created when you call `make`. 
Note that this `README.asciidoc` is converted to an RFC-like document when you call `make`.

It needs `xsltproc` and `pandoc` to be installed.

What is supported?

* Sections with anchor and title attributes, see 
* Tables, see 
* List style=symbols, see 
* List style=numbers;
* List style=letters;
* List style=format %i, roman lowercase numerals;
* List style=format %I, roman uppercase numerals;
* List style=hanging, see 
* Example lists, see
* Figure/artwork, see 
* Blockquote - this isn't supported by `xml2rfc`, so this is converted to
    figure/artwork paragraph. See 
* Refs: external (eref), see 
* Refs: internal (xref) see 
* Spanx style=verb, style=emph, style=strong, see 

What's not?

* lists inside a table (xml2rfc doesn't handle this);
* list style=empty|format (no pandoc syntax available);
* crefs: for comments (no pandoc syntax available);
* irefs: index (no pandoc syntax available);
* footnotes, this isn't supported in `xml2rfc`, you will get a warning
    when these are encountered.

The heavy lifting is done by `transform.xsl` that transforms the XML.

https://github.com/miekg/pandoc2rfc/[See this pandoc2rfc github repository].

== AsciiDoc Constructs ==

What do you need to type in Pandoc to get the correct output. Note this
is just basic Pandoc format, so you might be better off reading the ASciiDoc
manual, see `asciidoc --help syntax | less`.

=== section ===

Just use the normal sectioning commands available in AsciiDoc.

    == Section1 One ==
    Bla

Converts to xml2rfc: `<section title="Section1 One" anchor="section1-one">`
If you have another section that is also named "Section1 One", that
anchor will be called "section1-one-1". Referencing the section
is done with `see [](#section1-one)`, see [](#refs-internal).

=== list style symbols ===

    A symbol list.

    * Item one;
    * Item two.

Converts to xml2rfc: `<list style="symbol">`

=== list style numbers ===

    A numbered list.

    1. Item one;
    2. Item two.

Converts to xml2rfc: `<list style="numbers">`

=== list style letters ===

    A numbered list.

    a. Item one;
    b. Item two.

Converts to xml2rfc: `<list style="letters">`

=== list style hanging ===

This is more like a labeled list, so we need to use:

    First item that needs clarification:: Explanation one
    More stuff, because item is difficult to explain.
    * item1
    * item2

    Second item that needs clarification:: Explanation two

Converts to xml2rfc: `<list style="hanging">` and `<t hangText="First item...">`

=== list style roman ===

Use the supported Pandoc syntax:

    i) First item
    ii) Second item

Converts to xml2rfc: `<list style="format %i.">`. Uppercase can also be used, this
yields: `<list style="format %I.">`

=== figure/artwork ===


Just indent the paragraph with 4 spaces.

Converts to xml2rfc: `<figure><artwork> ...`

=== blockquote ===

This is not supported by xml2rfc, but any paragraph like:

    > quoted text

Converts to xml2rfc: `<figure><artwork> ...`

=== refs external ===

Any reference like:

    [Click here](URI)

Converts to xml2rfc: `<ulink target="URI">Click here ...`

=== refs internal ===

Any reference like:

    [Click here](#localid)

Converts to xml2rfc: `<link target="localid">Click here ...` 

For referring to RFCs (for which you manually need add the reference source in the template,
use a `include refs.xml` or something), you can just use:

    [](#RFC2119)

And it does the right thing. Referencing sections is done with:

    See [](#pandoc-constructs)

The word 'Section' is inserted automatically: ... see [](#pandoc-constructs) ...

=== spanx style ===

The verb style can be selected with back-tics:

    +text+

Converts to xml2rfc: `<spanx style="verb"> ...`

And the emphasis style with asterisks:

    _text_

Converts to xml2rfc: `<spanx style="emph"> ...`

And the emphasis style with double asterisks:

    **text**

Converts to xml2rfc: `<spanx style="strong"> ...`
